<?xml version="1.0" encoding="utf-8"?>
<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:behaviours="clr-namespace:Common.Wpf;assembly=Common"
             xmlns:WPF="clr-namespace:CreateObject.WPF;assembly=CreateObject" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
             x:Name="MainWindow"
             behaviours:TabTitleBehavior.TabTitle="$UIString[LBL36]"
             >
    <UserControl.Resources>
        <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="#FFABADB3"/>
            <Setter Property="BorderThickness" Value="1,1,1,0"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="#ff0000"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="#FFABADB3"/>
            <Setter Property="BorderThickness" Value="0,1,1,0"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="Required" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="">
                    <Setter Property="BorderBrush" Value="Red"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="Editable" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, ElementName=btnEdit}" Value="False">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="IsReadOnly" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsEnabled, ElementName=btnEdit}" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                    <Setter Property="IsReadOnly" Value="True"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ComboMask" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, ElementName=btnEdit}" Value="False">
                    <Setter Property="Visibility" Value="Hidden"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsEnabled, ElementName=btnEdit}" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                    <Setter Property="IsReadOnly" Value="True"/>
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ComboEdit" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, ElementName=btnEdit}" Value="True">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsEnabled, ElementName=btnEdit}" Value="False">
                    <Setter Property="IsEnabled" Value="True"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
        <Grid x:Name="grdMain">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid x:Name="grdProps" Margin="5" Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="140" />
                    <ColumnDefinition Width="280" />
                </Grid.ColumnDefinitions>
                <Label Content="{Binding UIString[LBL31], FallbackValue=Number}" Grid.Row="0" Grid.Column="0"/>
                <TextBox Text="{Binding Prop[_XLTN_NUMBER].Value}" Grid.Row="0" Grid.Column="1" />
                <Label Content="{Binding UIString[LBL2], FallbackValue=Title}" Grid.Column="0" Grid.Row="1" />
                <TextBox x:Name="txtItemTitle" Text="{Binding PsVal[ItemTitle], Mode=OneWay}" Grid.Column="1" Grid.Row="1" Style="{StaticResource ResourceKey=Editable}" />
                <Label Content="{Binding UIString[LBL3], FallbackValue=Description}" Grid.Column="0" Grid.Row="2" />
                <TextBox Text="{Binding PsVal[ItemDescription], Mode=OneWay}" Grid.Column="1" Grid.Row="2" x:Name="txtItemDescr" 
                         MinHeight="50" TextWrapping="Wrap" AcceptsReturn="True" Style="{StaticResource ResourceKey=Editable}"/>
                <Label Content="CustomValue" Grid.Row="3" BorderThickness="1,1,1,0" />
                <TextBox x:Name="txtCustomValue" Grid.Row="3" Text="{Binding Prop[CustomValue].Value}" Grid.Column="1" BorderThickness="0,1,1,0" Style="{StaticResource Editable}" />
                <Label Content="CustomCompany" Grid.Row="4" BorderThickness="1" />
                <Border Grid.Row="4" Grid.Column="1" BorderThickness="0,1,1,1" BorderBrush="#FFABADB3" >
                    <Grid>
                        <ComboBox x:Name="cmbCustomCompany" SelectedValue="{Binding Prop[CustomCompany].Value}" Text="{Binding Prop[CustomCompany].Value}" Style="{StaticResource ComboEdit}" BorderThickness="0"/>
                        <TextBox x:Name="txtCustomCompany" Text="{Binding Prop[CustomCompany].Value}" Style="{StaticResource ResourceKey=ComboMask}" BorderThickness="0"/>
                    </Grid>

                </Border>
            </Grid>

            <Grid x:Name="grdButtons" Grid.Row="1" Margin="5" Height="24">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="140"/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Button x:Name="btnEdit" Content="Edit" Command="{Binding PsCmd[EditEcoProps]}" Grid.Column="1" HorizontalAlignment="Right" Width="80" IsEnabled="True"/>
                <Button x:Name="btnSave" Content="Save" Grid.Column="2" HorizontalAlignment="Right"  Width="80" Command="{Binding PsCmd[EcoUpdate]}" IsEnabled="False"/>
                <Button x:Name="btnCancel" Content="Cancel" Grid.Column="3" HorizontalAlignment="Right"  Width="80" Command="{Binding PsCmd[CancelEcoUpdate]}" IsEnabled="False" />
            </Grid>

        </Grid>

    </ScrollViewer>
</UserControl>